================================== DATE AND TIME ============================


3.0.2 :005 > a=Time.new                        #Display the current time
 => 2021-11-24 16:05:56.662810584 +0530  
3.0.2 :006 > a
 => 2021-11-24 16:05:56.662810584 +0530 

3.0.2 :007 > b=Time.new(2007,10,12,11,25,36)   #You can  display the time according your date
 => 2007-10-12 11:25:36 +0530 
3.0.2 :008 > b
 => 2007-10-12 11:25:36 +0530 

3.0.2 :009 > (b-a)/3600                        #Gives the difference in hours
 => -123772.67240633626 
3.0.2 :010 > (a-b)/3600
 => 123772.67240633626 

 ===========================================================================

 3.0.2 :017 > a
 => 2021-11-24 16:05:56.662810584 +0530 

3.0.2 :018 > a+(60*20*10)                      #(time+numeric value) returns time
 => 2021-11-24 19:25:56.662810584 +0530 

============================================================================

3.0.2 :021 > Time.now.asctime                 #Print the time in string format 
 => "Wed Nov 24 16:24:05 2021" 

3.0.2 :022 > Time.now.ctime                   #Same as ctime
 => "Wed Nov 24 16:24:14 2021" 

 ===========================================================================

 3.0.2 :024 > a=Time.now
 => 2021-11-24 16:28:04.727803936 +0530 

3.0.2 :025 > a.ceil                           #Ceils subsecond to a given precision in decimal digits (0 digits by default)
 => 2021-11-24 16:28:05 +0530 

3.0.2 :026 > a.ceil(1)
 => 2021-11-24 16:28:04.8 +0530 

3.0.2 :027 > a.ceil(4)
 => 2021-11-24 16:28:04.7279 +0530 


============================================================================

3.0.2 :029 > Time.now.day                   #Tells day
 => 24 

3.0.2 :030 > Time.now.hour                  #Omits hour
 => 16 

3.0.2 :032 > Time.now.year                  #Omits year
 => 2021 

3.0.2 :033 > Time.now.month                 #Omits month
 => 11 


============================================================================


3.0.2 :039 > a=Time.now
 => 2021-11-24 16:45:26.285447278 +0530 


3.0.2 :041 > b=Time.now
 => 2021-11-24 16:45:44.985102134 +0530 

3.0.2 :042 > a.eql?(b)                           #Returns true or false 
 => false 


============================================================================

3.0.2 :043 > a
 => 2021-11-24 16:45:26.285447278 +0530 

3.0.2 :044 > a.floor                            #Display time by floors subseconds
 => 2021-11-24 16:45:26 +0530 

3.0.2 :045 > a.floor(2)
 => 2021-11-24 16:45:26.28 +0530 

3.0.2 :046 > a.floor(6)
 => 2021-11-24 16:45:26.285447 +0530 


=============================================================================

3.0.2 :048 > t=Time.local(2002,11,12)
 => 2002-11-12 00:00:00 +0530 
3.0.2 :049 > t.friday?                #Returns true if day was/is/will friday
 => false 

3.0.2 :050 > t=Time.local(2002,11,11)
 => 2002-11-11 00:00:00 +0530 
3.0.2 :051 > t.friday?
 => false 

3.0.2 :052 > t=Time.local(2002,11,10)
 => 2002-11-10 00:00:00 +0530 
3.0.2 :053 > t.friday?
 => false 

3.0.2 :054 > t=Time.local(2002,11,9)
 => 2002-11-09 00:00:00 +0530 
3.0.2 :055 > t.friday?
 => false 

3.0.2 :056 > t=Time.local(2002,11,8)
 => 2002-11-08 00:00:00 +0530 
3.0.2 :057 > t.friday?
 => true 

==============================================================

3.0.2 :060 > t=Time.local(2015,11,30,23,59)
 => 2015-11-30 23:59:00 +0530 
3.0.2 :061 > t.gmt?
 => false 

3.0.2 :062 > y=t.getgm                              #Returns a new Time object representing time in UTC.
 => 2015-11-30 18:29:00 UTC                         #getutc works same as getgm

3.0.2 :063 > y.gmt?
 => true 
3.0.2 :064 > t==y
 => true 


===============================================================


3.0.2 :074 > t=Time.local(2003,11,11,11,11,11)
 => 2003-11-11 11:11:11 +0530 

3.0.2 :075 > t.utc?
 => false 

3.0.2 :076 > t.gmt?
 => false 

3.0.2 :077 > t.getutc
 => 2003-11-11 05:41:11 UTC 
3.0.2 :078 > t.gmt?
 => false 

3.0.2 :079 > a=t.getutc
 => 2003-11-11 05:41:11 UTC 

3.0.2 :080 > a.gmt?               #Returns true if time represents a time in UTC (GMT).
 => true 

3.0.2 :081 > a.utc?
 => true 


===============================================================


3.0.2 :082 > t=Time.gm(2006,12,10,11,11,12)
 => 2006-12-10 11:11:12 UTC 

3.0.2 :085 > t.gmt_offset
 => 0 

3.0.2 :086 > l=t.getlocal
 => 2006-12-10 16:41:12 +0530 

3.0.2 :089 > l.gmt_offset           #Returns the offset in seconds between the timezone of time and UTC
 => 19800                           #gmtoff is alias for gmt_offset


===============================================================

3.0.2 :001 > t=Time.now
 => 2021-11-24 17:47:51.629104925 +0530 
3.0.2 :002 > t.gmt?
 => false 
3.0.2 :003 > t.utc?
 => false 

3.0.2 :004 > t.gmtime              #Converts time to UTC (GMT), modifying the receiver.
 => 2021-11-24 12:17:51.629104925 UTC 
3.0.2 :005 > t.gmt?
 => true 
3.0.2 :006 > t.utc?
 => true 

================================================================

3.0.2 :012 > l.hash                #Returns the hash value for time object
 => -960169330881900736 


================================================================

3.0.2 :013 > t=Time.gm(2006,12,10,11,11,12)
 => 2006-12-10 11:11:12 UTC 
3.0.2 :014 > t.hour
 => 11 

3.0.2 :015 > t.monday?            #Returns true if monday
 => false 

3.0.2 :016 > t.tuesday?           #Returns true if tuesday
 => false                         

3.0.2 :017 > t.wednesday?         #Returns true if wednesday
 => false 

3.0.2 :018 > t.thursday?          #Returns true if thursday
 => false 

3.0.2 :019 > t.fr

t.freeze
t.friday?
t.frozen?

3.0.2 :019 > t.friday?           #Returns true if friday
 => false 

3.0.2 :020 > t.saturday?         #Returns true if saturday
 => false 

3.0.2 :021 > t.sunday?           #Returns true if sunday
 => true 

==================================================================


3.0.2 :022 > t
 => 2006-12-10 11:11:12 UTC 
3.0.2 :023 > t.inspect              #Retrun string representing time
 => "2006-12-10 11:11:12 UTC" 

3.0.2 :024 > t.getlocal
 => 2006-12-10 16:41:12 +0530 
3.0.2 :025 > t
 => 2006-12-10 11:11:12 UTC 

3.0.2 :026 > l=t.getlocal
 => 2006-12-10 16:41:12 +0530 

3.0.2 :027 > l.inspect
 => "2006-12-10 16:41:12 +0530" 

==================================================================

.0.2 :037 > Time.local(2002,11,11).zone
 => "IST" 

3.0.2 :038 > Time.local(2002,11,11).isdst  #Returns true if time occurs during Daylight Saving Time in its time zone.
 => false 
 
 
3.0.2 :039 > Time.local(2002,11,11).dst?
 => false 

==================================================================

3.0.2 :001 > t=Time.now
 => 2021-11-25 10:12:43.733970358 +0530 

3.0.2 :003 > t.utc?
 => false 

3.0.2 :004 > t.gmt?
 => false 

3.0.2 :005 > t.localtime
 => 2021-11-25 10:12:43.733970358 +0530 

3.0.2 :008 > l=t.utc
 => 2021-11-25 04:42:43.733970358 UTC 

3.0.2 :009 > l.utc?
 => true 
3.0.2 :010 > l.gmt?
 => true 

3.0.2 :012 > l.day                #Returns day(1..31)
 => 25 
3.0.2 :013 > l.mday               #Alias for day
 => 25 
3.0.2 :014 > l.min                #Returns minute (0..59)
 => 42 
3.0.2 :015 > l.mon                #Returns month (1..12)
 => 11 
3.0.2 :016 > l.month              #Alias for mon
 => 11 

===============================================================

3.0.2 :018 > l.sec                #Returns the seconds (0..60)
 => 43 

3.0.2 :019 > l.nsec               #Returns the number of nanoseconds for the subsecond part of time
 => 733970358 

3.0.2 :027 > l.subsec             #Returns subseconds 
 => (366985179/500000000) 

 3.0.2 :032 >   l
3.0.2 :033 >   
 => 2021-11-25 04:42:43.733970358 UTC 

3.0.2 :034 > l.strftime("%d/%m/%y")    #Formats time according to the directives in the given format string
 => "25/11/21" 
3.0.2 :035 > l.strftime("The date is %d/%m/%y")
 => "The date is 25/11/21" 


==============================================================

3.0.2 :036 > l.to_a                   #Returns an array of sec, min, hour, day, month, year, wday, yday, isdst, zone
 => [43, 42, 4, 25, 11, 2021, 4, 329, false, "UTC"] 

3.0.2 :037 > l.to_f                   #Returns float number of seconds
 => 1637815363.7339704 

 3.0.2 :038 > l.to_i                  #Returns integer of seconds
 => 1637815363 

 3.0.2 :039 > l.wday                  #Returns the week day
 => 4 
3.0.2 :040 > l.yday                   #Returns the year day
 => 329 
