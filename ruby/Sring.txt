3.0.2 :001 > s="Ruby is fun"
 => "Ruby is fun" 

3.0.2 :002 > s.bytes                                       #Returns an array of bytes in string              
 => [82, 117, 98, 121, 32, 105, 115, 32, 102, 117, 110] 
3.0.2 :003 > s.bytesize                                    #Returns the count of bytes in self
 => 11 
3.0.2 :004 > s.byteslice(2)
 => "b" 
3.0.2 :005 > s.byteslice(-3)
 => "f" 
3.0.2 :006 > s.byteslice(-4)
 => " " 
3.0.2 :007 > s.byteslice(1..3)
 => "uby" 
3.0.2 :008 > s.byteslice(1...3)
 => "ub" 
3.0.2 :009 > s.byteslice(1,3)
 => "uby" 
===================================================

3.0.2 :021 > s="hello"
 => "hello" 
3.0.2 :022 > s.capitalize                     #Convert first letter into capital letter, does not modify the self array
 => "Hello" 
3.0.2 :023 > s
 => "hello" 

3.0.2 :016 > s="hello"
 => "hello" 
3.0.2 :017 > s.capitalize!                         #This method change the string also
 => "Hello" 
3.0.2 :018 > s
 => "Hello" 
===================================================

3.0.2 :024 > s1="aziz"
 => "aziz" 
3.0.2 :025 > s2="azizz"
 => "azizz" 

3.0.2 :026 > s1.casecmp(s2)                        #Returns -1 if other string is smaller
 => -1   

3.0.2 :027 > s2.casecmp(s1)                        #Returns -1 if other string is greater
 => 1 

3.0.2 :030 > s1.casecmp(s1)                        #Returns 0 if other string is equal 
 => 0 

3.0.2 :031 > s1.casecmp(1)                         #Returns nil if not comparable
 => nil 


3.0.2 :032 > s1.casecmp?(1)                        #casecmp?() returns true or false 
 => nil 
3.0.2 :033 > s1.casecmp?(s1)
 => true 
3.0.2 :034 > s2.casecmp(s1)
 => 1 
3.0.2 :035 > s2.casecmp?(s1)
 => false 

===================================================


3.0.2 :036 > s1
 => "aziz" 

3.0.2 :037 > s1.center(2)                     #Returns string in center
 => "aziz" 
3.0.2 :038 > s1.center(20)                    #Width is greater than str length space padding applied at right and left.
 => "        aziz        " 

 3.0.2 :039 > s1.center(20,'1')              #We can specify the padding character
 => "11111111aziz11111111" 

==================================================

3.0.2 :040 > s1
 => "aziz" 

3.0.2 :041 > s1.chars                       #Returns an array of string characters3.0.2 :048 > "aziz\n".chomp
 => "aziz" 

3.0.2 :049 > "aziz\n\r".chomp               #Remove the \n,\r ,\r\n from last
 => "aziz\n" 

3.0.2 :050 > "azizr".chomp('r')             #Specify what you have to remove
 => "aziz" 

 => ["a", "z", "i", "z"] 


