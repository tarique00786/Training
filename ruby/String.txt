3.0.2 :001 > s="Ruby is fun"
 => "Ruby is fun" 

3.0.2 :002 > s.bytes                                       #Returns an array of bytes in string              
 => [82, 117, 98, 121, 32, 105, 115, 32, 102, 117, 110] 
3.0.2 :003 > s.bytesize                                    #Returns the count of bytes in self
 => 11 
3.0.2 :004 > s.byteslice(2)
 => "b" 
3.0.2 :005 > s.byteslice(-3)
 => "f" 
3.0.2 :006 > s.byteslice(-4)
 => " " 
3.0.2 :007 > s.byteslice(1..3)
 => "uby" 
3.0.2 :008 > s.byteslice(1...3)
 => "ub" 
3.0.2 :009 > s.byteslice(1,3)
 => "uby" 
===================================================

3.0.2 :021 > s="hello"
 => "hello" 
3.0.2 :022 > s.capitalize                     #Convert first letter into capital letter, does not modify the self array
 => "Hello" 
3.0.2 :023 > s
 => "hello" 

3.0.2 :016 > s="hello"
 => "hello" 
3.0.2 :017 > s.capitalize!                         #This method change the string also
 => "Hello" 
3.0.2 :018 > s
 => "Hello" 
===================================================

3.0.2 :024 > s1="aziz"
 => "aziz" 
3.0.2 :025 > s2="azizz"
 => "azizz" 

3.0.2 :026 > s1.casecmp(s2)                        #Returns -1 if other string is smaller
 => -1   

3.0.2 :027 > s2.casecmp(s1)                        #Returns -1 if other string is greater
 => 1 

3.0.2 :030 > s1.casecmp(s1)                        #Returns 0 if other string is equal 
 => 0 

3.0.2 :031 > s1.casecmp(1)                         #Returns nil if not comparable
 => nil 


3.0.2 :032 > s1.casecmp?(1)                        #casecmp?() returns true or false 
 => nil 
3.0.2 :033 > s1.casecmp?(s1)
 => true 
3.0.2 :034 > s2.casecmp(s1)
 => 1 
3.0.2 :035 > s2.casecmp?(s1)
 => false 

===================================================


3.0.2 :036 > s1
 => "aziz" 

3.0.2 :037 > s1.center(2)                     #Returns string in center
 => "aziz" 
3.0.2 :038 > s1.center(20)                    #Width is greater than str length space padding applied at right and left.
 => "        aziz        " 

 3.0.2 :039 > s1.center(20,'1')              #We can specify the padding character
 => "11111111aziz11111111" 

==================================================

3.0.2 :040 > s1
 => "aziz" 

3.0.2 :041 > s1.chars                       #Returns an array of string characters3.0.2 :048 > "aziz\n".chomp
 => "aziz" 

3.0.2 :049 > "aziz\n\r".chomp               #Remove the \n,\r ,\r\n from last
 => "aziz\n" 

3.0.2 :050 > "azizr".chomp('r')             #Specify what you have to remove
 => "aziz" 

 => ["a", "z", "i", "z"] 

3.0.2 :005 > s1
 => "azizzz" 
3.0.2 :006 > s1.chomp!('zz')                #Modifies the string after deleting
 => "aziz" 
3.0.2 :007 > s1
 => "aziz" 

==================================================

3.0.2 :011 > s1
 => "aziz" 
3.0.2 :012 > s1.chop                       #Removes the last character from string, not modifies the self
 => "azi" 
3.0.2 :013 > s1
 => "aziz" 
3.0.2 :014 > s1.chop!                      #Removes the last character and modifies the string
 => "azi" 
3.0.2 :015 > s1
 => "azi" 

=================================================

3.0.2 :015 > s1
 => "azi" 
3.0.2 :016 > s1.chr                       #Returns a one character string from beginning, not modifies the original
 => "a" 
3.0.2 :017 > s1
 => "azi" 
3.0.2 :018 > s1.clear                     #Returns empty string, in place method
 => "" 
3.0.2 :019 > s1
 => "" 

=================================================
3.0.2 :021 > s1="aziz"
 => "aziz" 
3.0.2 :022 > s1.codepoints               #Returns the array of integer cordinal of characters in string
 => [97, 122, 105, 122] 

3.0.2 :023 > s2="azizz"
 => "azizz" 

3.0.2 :024 > s1.concat("tarique",s2)     #Return the concatenation of strings
 => "aziztariqueazizz" 

=================================================
3.0.2 :031 > s1
 => "aziztariqueazizz" 
3.0.2 :032 > s1.delete "i"              #Delete evey occurence of given string but not modifies the self
 => "azztarqueazzz" 

3.0.2 :033 > s1.delete "z"
 => "aitariqueai" 

3.0.2 :034 > s1
 => "aziztariqueazizz" 
3.0.2 :035 > s1.delete! "z"            #Deletes every occurences of given string but modifies the self
 => "aitariqueai" 
3.0.2 :036 > s1
 => "aitariqueai" 

=================================================

3.0.2 :038 > s1.delete_prefix("aita")    #Deletes given prefix from the string but not inplace 
 => "riqueai" 

3.0.2 :039 > s1
 => "aitariqueai" 
3.0.2 :040 > s1.delete_prefix!("aita")   #Deletes given prefix of given string but modifies the string also
 => "riqueai" 
3.0.2 :041 > s1
 => "riqueai" 
3.0.2 :042 > s1.delete_prefix("iq")
 => "riqueai" 

3.0.2 :042 > s1.delete_prefix("iq")      #Deletes suffix of given string but it is not inplace 
 => "riqueai" 
3.0.2 :043 > s1.delete_suffix("ai")
 => "rique" 
3.0.2 :044 > s1
 => "riqueai" 
3.0.2 :045 > s1.delete_suffix!("ai")     #Deletes suffix of given string but it is inplace
 => "rique" 
3.0.2 :046 > s1
 => "rique" 
=================================================

3.0.2 :049 > s1="AbcDe"
 => "AbcDe" 
3.0.2 :050 > s1.downcase                #Convert every uppercase into lowercase,not inplace 
 => "abcde" 
3.0.2 :051 > s1
 => "AbcDe" 
3.0.2 :052 > s1.downcase!               #Convert every uppwercase into lowercase,but inplace
 => "abcde" 
3.0.2 :053 > s1
 => "abcde" 
=================================================

3.0.2 :056 > s1.each_byte{|e| print e, ' '}   #Print equivalent integer for every character in string
97 98 99 100 101  => "abcde" 

=================================================


3.0.2 :003 > s1="Ruby is very good language for web development"
 => "Ruby is very good language for web development" 

3.0.2 :004 > s1.each_line(' '){|e| print e}     #Returns the strings according to your seperator in new line      
Ruby is very good language for web development => "Ruby is very good language for web development" 

3.0.2 :005 > s1.each_line(' '){|e| p e}
"Ruby "
"is "
"very "
"good "
"language "
"for "
"web "
"development"
=================================================

3.0.2 :008 > s1
 => "Ruby is very good language for web development" 
3.0.2 :009 > s1.empty?                               #Returns true if string is empty else false
 => false 
3.0.2 :010 > s2=""
 => "" 
3.0.2 :011 > s2.empty?
 => true 

================================================

3.0.2 :012 > s1
 => "Ruby is very good language for web development" 

3.0.2 :013 > s1.end_with?("nt")                     #Returns true if end with given parameter string else false
 => true 

3.0.2 :014 > s1.end_with?("web")          
 => false 
3.0.2 :015 > s1.end_with?("web")
 => false 
3.0.2 :016 > s1.end_with?("web","development")     #Returns true if ends with one of them
 => true 

===============================================

3.0.2 :017 > s1="aziz"
 => "aziz" 
3.0.2 :018 > s1.eql?("aziz")                       #Return true if two strings have same length and same content
 => true 
3.0.2 :019 > s1.eql?("azi")
 => false 
3.0.2 :020 > s1.eql?("AZIZ")
 => false 

===============================================

3.0.2 :022 > s1
 => "aziz" 
3.0.2 :023 > s1.getbyte(3)                       #Returns the index byte as integer
 => 122 
3.0.2 :024 > s1.getbyte(1)
 => 122 
3.0.2 :025 > s1.getbyte(0)
 => 97 

=============================================

3.0.2 :026 > s1
 => "aziz" 
3.0.2 :027 > s1.hex                             #Return hex value for the string
 => 10 
3.0.2 :028 > "a".hex
 => 10 
3.0.2 :029 > "b".hex
 => 11 
3.0.2 :030 > s1.hex
 => 10 
3.0.2 :031 > "c".hex
 => 12 

=============================================

3.0.2 :033 > s1.hash
 => -2844654870071996127                       #Returns hash value for the string
3.0.2 :034 > "a".hash
 => 2485864913488045635 
=============================================

3.0.2 :032 > s1
 => "aziz" 

3.0.2 :035 > s1.include?("z")                 #Returns true if parameter string contains by s1 else returns false
 => true 
3.0.2 :036 > s1.include?"z"
 => true 
3.0.2 :037 > s1.include?" "
 => false 
3.0.2 :038 > s1.include?"p "
 => false 
3.0.2 :039 > 

============================================
3.0.2 :039 > s1
 => "aziz" 
3.0.2 :040 > s1.index("i")                 #Returns index of parameter  string in self
 => 2 
3.0.2 :041 > s1.index('i',2)               #Returns index after given position
 => 2 
3.0.2 :042 > s1.index('i',3)               
 => nil 
3.0.2 :043 > s1.index('i',-1)
 => nil 
3.0.2 :044 > s1
 => "aziz" 
3.0.2 :045 > s1.index('i',-1)
 => nil 
3.0.2 :046 > s1.index("i",-1)
 => nil 
3.0.2 :047 > s1.index("i",-2)             #Search index from last given position
 => 2 

 ==========================================

 3.0.2 :051 > a="aziz"
 => "aziz" 
3.0.2 :052 > a.insert(0,"tarique ")     #Insert character or string on given string
 => "tarique aziz" 
3.0.2 :053 > a.insert(7," loves ")
 => "tarique loves  aziz"

==========================================

3.0.2 :060 > str="hello"
 => "hello" 
3.0.2 :061 > str[3]="a"
 => "a" 
3.0.2 :062 > str.inspect               #Returns a printable version of str, surrounded by quote marks, with special characters
 => "\"helao\""                        #escaped

 =========================================

 3.0.2 :065 > str1="Hi @aziz"
 => "Hi @aziz" 
3.0.2 :066 > str1.intern              #Returns symol crresponding to string 
 => :"Hi @aziz" 
3.0.2 :067 > str1="Hi aziz"
 => "Hi aziz" 

3.0.2 :068 > str1.intern              #If symbol is not present then it creates
 => :"Hi aziz" 
3.0.2 :069 > str1
 => "Hi aziz" 

==========================================

3.0.2 :002 > s1.length               #Returns the length of string
 => 5 
3.0.2 :003 > s1.size
 => 5 

3.0.2 :004 > s1="I love ruby programming"
 => "I love ruby programming" 
3.0.2 :005 > s1.lines              
 => ["I love ruby programming"] 
3.0.2 :006 > s1.lines(" ")          #Returns an array of lines in str split using the supplied record separator
 => ["I ", "love ", "ruby ", "programming"] 

 =========================================

 3.0.2 :010 > s1="hello"
 => "hello" 
3.0.2 :011 > s1.ljust(2)
 => "hello" 
3.0.2 :012 > s1.ljust(20)        #String will adjust in leftwith paddings in right.
 => "hello               " 
3.0.2 :013 > s1.ljust(20,'hh')   #You can specify your padding
 => "hellohhhhhhhhhhhhhhh" 
==========================================

3.0.2 :014 > s1="       hello    "
 => "       hello    " 

3.0.2 :015 > s1.lstrip          #Removes the left extraspaces,not inplace
 => "hello    " 
3.0.2 :016 > s1
 => "       hello    " 

3.0.2 :017 > s1.lstrip!         #Removes the left extraspaces , method is inplace
 => "hello    " 
3.0.2 :018 > s1
 => "hello    " 

3.0.2 :019 > s1.rstrip          #Removes the rightextraspaces, method is not inplace
 => "hello" 
3.0.2 :020 > s1
 => "hello    " 

3.0.2 :021 > s1.rstrip!         #Removes the right extraspaces ,method is inplace
 => "hello" 
3.0.2 :022 > s1
 => "hello" 
===========================================

3.0.2 :022 > s1
 => "hello" 
3.0.2 :023 > s1.match

s1.match
s1.match?
3.0.2 :023 > s1.match?('z')      #Returns true if parameter contains by self string else returns false
 => false 
3.0.2 :024 > s1.match?('h')
 => true 

3.0.2 :025 > s1.match('h')       #returns the computed matchdata
 => #<MatchData "h"> 
3.0.2 :026 > s1.match('h')
 => #<MatchData "h"> 
3.0.2 :027 > s1.match('z')
 => nil 

============================================

3.0.2 :028 > s1
 => "hello" 
3.0.2 :029 > s1.succ            #Returns after incrementing, not inplace method
 => "hellp" 

3.0.2 :030 > 
3.0.2 :031 > s1
 => "hello" 
3.0.2 :032 > s1.succ!           #Returns after incrementing, inplace method
 => "hellp" 

3.0.2 :033 > s1
 => "hellp" 
3.0.2 :034 > s1.next            #Alias to string.succ ,not inplace
 => "hellq" 

3.0.2 :035 > s1
 => "hellp" 
3.0.2 :036 > s1.next!           #Alias to succ! , inplace method
 => "hellq" 
3.0.2 :037 > s1
 => "hellq" 

============================================

3.0.2 :040 > "123".oct   #Returns the corresponding 
 => 83 
3.0.2 :041 > "a".ord
 => 97 
3.0.2 :042 > 'a'.ord     #Returns the corresponding integer value for single character
 => 97 

 ===========================================

 3.0.2 :043 > s1
 => "hellq" 
3.0.2 :044 > s1.partition('e')       #Reurns array [head,separation,tail]
 => ["h", "e", "llq"] 
3.0.2 :045 > s1.partition('x')
 => ["hellq", "", ""] 

3.0.2 :053 > s1.partition(/.l/)     #Returns array [head,match,tail]
 => ["h", "el", "lo"] 
3.0.2 :054 > s1="hello hi"
 => "hello hi" 
3.0.2 :055 > s1.partition(/.l/)
 => ["h", "el", "lo hi"] 
3.0.2 :056 > 

============================================

3.0.2 :056 > s1
 => "hello hi" 
3.0.2 :057 > s1.prepend("Ruby")     #Adds Ruby in beginning of s1,Method is inplace 
 => "Rubyhello hi" 
3.0.2 :058 > s1.prepend(" Rails ", " And ")               #Adds both string in beginning of s1,Method is inplace
 => " Rails  And Rubyhello hi" 
============================================

3.0.2 :002 > s1="aziz"
 => "aziz" 
3.0.2 :003 > s1.replace("tarique")     #Replaces the string with given string ,method is inplace 
 => "tarique" 
3.0.2 :004 > s1
 => "tarique" 

3.0.2 :005 > s1.reverse                #Reverse the self string , not inplace
 => "euqirat" 
3.0.2 :006 > s1
 => "tarique" 

3.0.2 :007 > s1.reverse!               #Reverse the string , method is inplace
 => "euqirat" 
3.0.2 :008 > s1
 => "euqirat" 

=============================================

3.0.2 :010 > s1
 => "tarique" 
3.0.2 :011 > s1.rindex('i')           #Returns the last index of passed arguement
 => 3 

3.0.2 :013 > s1.concat('e')
 => "tariquee" 

3.0.2 :014 > s1
 => "tariquee" 
3.0.2 :015 > s1.rindex('e')
 => 7 

=============================================


3.0.2 :022 > s1
 => "aziz" 
3.0.2 :023 > s1.rjust(2)            #Adjust in right with no padding
 => "aziz" 
3.0.2 :024 > s1.rjust(20)           #Adjust in right with default padding in left
 => "                aziz" 

3.0.2 :025 > s1.rjust(20,'x')       #Adjust in right with given padding in left
 => "xxxxxxxxxxxxxxxxaziz" 


=============================================



3.0.2 :027 > s1
 => "aziz" 
3.0.2 :028 > s1.rpartition('i')    #Returns array after partition from end of the string 
 => ["az", "i", "z"] 
3.0.2 :029 > s1
 => "aziz" 

 3.0.2 :032 > s1.rpartition(/.i/)
 => ["a", "zi", "z"] 

 ============================================

 3.0.2 :033 > s1="     aziz          "
 => "     aziz          " 

3.0.2 :034 > s1.rstrip            #Returns after removing extraspaces from end, not inplace 
 => "     aziz" 
3.0.2 :035 > s1
 => "     aziz          " 

3.0.2 :036 > s1.rstrip!           #Returns after removing extraspaces from end, inplace     
 => "     aziz" 
3.0.2 :037 > s1
 => "     aziz" 


 =============================================

3.0.2 :041 > s1
 => "Programming is fun to learn" 
3.0.2 :042 > s1.scan(/\w+/)                 #Returns array of each word
 => ["Programming", "is", "fun", "to", "learn"] 

3.0.2 :043 > s1.scan(/../)                  #Returns aray of containing 2 letters
 => ["Pr", "og", "ra", "mm", "in", "g ", "is", " f", "un", " t", "o ", "le", "ar"] 

3.0.2 :045 > s1.scan(/(..)/)               #Returns array of 1-D arrays containing 2 letters
 => [["Pr"], ["og"], ["ra"], ["mm"], ["in"], ["g "], ["is"], [" f"], ["un"], [" t"], ["o "], ["le"], ["ar"]] 

3.0.2 :046 > s1.scan(/(..)(...)/)      #Returns array of 1-D array containing 2 and 3 letters
 => [["Pr", "ogr"], ["am", "min"], ["g ", "is "], ["fu", "n t"], ["o ", "lea"]] 

3.0.2 :047 > s1.scan(/(....)/)         #returns array of 1-D containing 4 letters
 => [["Prog"], ["ramm"], ["ing "], ["is f"], ["un t"], ["o le"]] 


===============================================
3.0.2 :048 > s1.setbyte(0,5)    #modifies the indexth byte as integer
 => 5 

3.0.2 :050 > s1.bytes
 => [5, 114, 111, 103, 114, 97, 109, 109, 105, 110, 103, 32, 105, 115, 32, 102, 117, 110, 32, 116, 111, 32, 108, 101, 97, 114, 110] 
3.0.2 :051 > s1
 => "\u0005rogramming is fun to learn" 

===============================================


3.0.2 :053 > s1="hey there"
 => "hey there" 
3.0.2 :054 > s1.slice(4)                 #Returns string on the index
 => "t" 
3.0.2 :055 > s1.slice(4..7)              #Returns string from index 4 till 7th
 => "ther" 
3.0.2 :056 > s1.slice(4...7)             #Returns string from index 4 till 6th
 => "the" 
3.0.2 :057 > s1.slice(4,4)               #Returns string from 4th index till length 4
 => "ther" 


3.0.2 :058 > s1
 => "hey there" 
3.0.2 :059 > s1.slice!(4,4)            #Returns the sliced string and this return string will be removed from self,inplace
 => "ther" 

3.0.2 :060 > s1
 => "hey e" 

 ==============================================

3.0.2 :001 > s1="Hi this is my company"
 => "Hi this is my company" 
3.0.2 :002 > s1.split                 #Split by default 
 => ["Hi", "this", "is", "my", "company"] 

3.0.2 :003 > s1.split(//)                  #Split by one letter
 => ["H", "i", " ", "t", "h", "i", "s", " ", "i", "s", " ", "m", "y", " ", "c", "o", "m", "p", "a", "n", "y"] 

3.0.2 :004 > s1.split(/ /)            #Split by one word
 => ["Hi", "this", "is", "my", "company"] 

3.0.2 :005 > s1.split(/ /,3)
 => ["Hi", "this", "is my company"] 
3.0.2 :006 > s1.split(/ /,4)
 => ["Hi", "this", "is", "my company"] 
3.0.2 :007 > 

===============================================
