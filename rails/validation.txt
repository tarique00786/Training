==================valid? and invalid?=================

3.0.2 :035 > u = User.new
 => #<User:0x000055ab4d643630 id: nil, first_name: nil, last_name: nil, email: nil, created_at: nil, updated_at: nil> 

3.0.2 :036 > u.errors.size
 => 0 

3.0.2 :037 > u.valid?
 => false 


3.0.2 :039 > u.errors.objects.first.full_message
 => "First name can't be blank" 

3.0.2 :040 > u.save
 => false 


3.0.2 :042 > u.save!
/usr/share/rvm/gems/ruby-3.0.2/gems/activerecord-6.1.4.1/lib/active_record/validations.rb:80:in `raise_validation_error': Validation failed: First name can't be blank (ActiveRecord::RecordInvalid)

3.0.2 :043 > u.errors.full_message
/usr/share/rvm/gems/ruby-3.0.2/gems/activemodel-6.1.4.1/lib/active_model/errors.rb:513:in `full_message': wrong number of arguments (given 0, expected 2) (ArgumentError)

3.0.2 :044 > u.errors.full_messages
 => ["First name can't be blank"] 

 3.0.2 :046 > u.errors[:first_name]
 => ["can't be blank"] 

3.0.2 :047 > u.invalid?
 => true 

3.0.2 :048 > u.errors[:last_name]
 => [] 

3.0.2 :049 > User.new.errors[:first_name].any?
 => false 

3.0.2 :050 > User.create.errors[:first_name].any?
 => true 


 =======================Validation helpers===================

 1. length


3.0.2 :029 > u = User.new(first_name: "asar", last_name:"sharma", email:"asary23@gmail.com", mobileno: 1433)
 => #<User:0x000055ab4d379440 id: nil, first_name: "asar", last_name: "sharma", email: "asary23@gmail.com", created_at: nil, updated_at: nil, mobileno: 1433> 
3.0.2 :030 > u.save
 => false 
3.0.2 :031 > u.errors.full_messages
 => ["Mobileno is too short (minimum is 6 characters)"] 


3.0.2 :045 > u = User.new(first_name: "asar", last_name:"sharma", email:"asary23@gmail.com", mobileno: 1433)
 => #<User:0x000055ab4c98e278 id: nil, first_name: "asar", last_name: "sharma", email: "asary23@gmail.com", created_at: nil, updated_at: nil, mobileno: 1433> 

3.0.2 :046 > u.save
  TRANSACTION (0.4ms)  BEGIN
  User Create (1.3ms)  INSERT INTO "users" ("first_name", "last_name", "email", "created_at", "updated_at", "mobileno") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"  [["first_name", "asar"], ["last_name", "sharma"], ["email", "asary23@gmail.com"], ["created_at", "2021-12-16 07:36:16.114371"], ["updated_at", "2021-12-16 07:36:16.114371"], ["mobileno", 1433]]
  TRANSACTION (2.3ms)  COMMIT
 => true 

 3.0.2 :048 > u = User.new(first_name: "asar", last_name:"sharma", email:"asary23@gmail.com", mobileno: 111111111111111)
 => #<User:0x000055ab4d5903c8 id: nil, first_name: "asar", last_name: "sharma", email: "asary23@gmail.com", created_at: nil, updated_at: nil, mobileno: 111111111111111> 

3.0.2 :049 > u.save
 => false 

3.0.2 :050 > u.errors.full_messages
 => ["Mobileno 10 characters is the maximum allowed"] 


2.Uniqueness

3.0.2 :063 > u = User.new(first_name: "ashu", last_name:"sharma", email:"asary23@gmail.com", mobileno: 1433)
 => #<User:0x000055ab4d8dc608 id: nil, first_name: "ashu", last_name: "sharma", email: "asary23@gmail.com", created_at: nil, updated_at: nil, mobileno: 1433> 

3.0.2 :064 > u.valid?
  User Exists? (1.0ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 1433], ["LIMIT", 1]]
 => false 

3.0.2 :065 > u.errors.full_messages
 => ["Mobileno has already been taken"] 

3. inclusion
3.0.2 :071 > u = User.new(first_name: "akshay", last_name:"sharma", email:"akshayy23@gmail.com", mobileno: 2565485, country: "america")
 => #<User:0x000055ab4d72f940 id: nil, first_name: "akshay", last_name: "sharma", email: "akshayy23@gmail.com", created_at: nil, updated_at: nil, mobileno: 2565485, country: "america"> 

3.0.2 :072 > u.valid?
  User Exists? (0.8ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 2565485], ["LIMIT", 1]]
 => true 

3.0.2 :073 > u.save
  TRANSACTION (0.6ms)  BEGIN
  User Exists? (0.6ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 2565485], ["LIMIT", 1]]
  User Create (0.8ms)  INSERT INTO "users" ("first_name", "last_name", "email", "created_at", "updated_at", "mobileno", "country") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["first_name", "akshay"], ["last_name", "sharma"], ["email", "akshayy23@gmail.com"], ["created_at", "2021-12-16 08:25:02.157255"], ["updated_at", "2021-12-16 08:25:02.157255"], ["mobileno", 2565485], ["country", "america"]]
  TRANSACTION (2.0ms)  COMMIT
 => true 
4 .Exclusion

3.0.2 :080 > u = User.new(first_name: "akshay", last_name:"sharma", email:"akshayy23@gmail.com", mobileno: 25654851, country: "brazil")
 => #<User:0x000055ab4d60dcb0 id: nil, first_name: "akshay", last_name: "sharma", email: "akshayy23@gmail.com", created_at: nil, updated_at: nil, mobileno: 25654851, country: "brazil"> 

3.0.2 :081 > u.valid?
  User Exists? (1.5ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 25654851], ["LIMIT", 1]]
 => false 

3.0.2 :082 > u.errors.full_messages
 => ["Country brazil is not valid", "Country brazil is not valid"] 

5.presence 

3.0.2 :094 > s = Supplier.new(name: "ravi")
 => #<Supplier:0x000055ab4c6a17b8 id: nil, name: "ravi", created_at: nil, updated_at: nil> 
3.0.2 :095 > s.valid?
 => false 

3.0.2 :096 > s.errors.full_message
/usr/share/rvm/gems/ruby-3.0.2/gems/activemodel-6.1.4.1/lib/active_model/errors.rb:513:in `full_message': wrong number of arguments (given 0, expected 2) (ArgumentError)
3.0.2 :097 > s.errors.full_messages
 => ["Account can't be blank"] 






==================Common validation option=================

allow_nil: true

 => #<User:0x000055ab4c76f550 id: nil, first_name: "aziz", last_name: "aziz", email: "aziz23@gmail.com", created_at: nil, updated_at: nil, mobileno: 2255664, country: nil> 
3.0.2 :110 > u.valid?
  User Exists? (1.2ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 2255664], ["LIMIT", 1]]
 => true 

 allow_blank: true

 3.0.2 :120 > u = User.new(first_name:"aziz", last_name: "aziz", email: "aziz23@gmail.com", mobileno: 22554, country: "")
 => #<User:0x000055ab4d8de9f8 id: nil, first_name: "aziz", last_name: "aziz", email: "aziz23@gmail.com", created_at: nil, updated_at: nil, mobileno: 22554, country: ""> 

3.0.2 :121 > u.valid?
  User Exists? (0.8ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 22554], ["LIMIT", 1]]
 => true 

  => #<User:0x000055ab4b38c948 id: nil, first_name: "mau", last_name: "aiz", email: "mau23@gmail.com", created_at: nil, updated_at: nil, mobileno: 945822554, country: "india", age: "thirty-one"> 

3.0.2 :018 > u.valid?
  User Exists? (1.1ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 945822554], ["LIMIT", 1]]
  User Exists? (1.2ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2  [["email", "mau23@gmail.com"], ["LIMIT", 1]]
 => true 

3.0.2 :019 > u.save
  TRANSACTION (0.5ms)  BEGIN
  User Exists? (0.7ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 945822554], ["LIMIT", 1]]
  User Exists? (0.7ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2  [["email", "mau23@gmail.com"], ["LIMIT", 1]]
  User Create (1.0ms)  INSERT INTO "users" ("first_name", "last_name", "email", "created_at", "updated_at", "mobileno", "country", "age") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["first_name", "mau"], ["last_name", "aiz"], ["email", "mau23@gmail.com"], ["created_at", "2021-12-16 10:23:36.097423"], ["updated_at", "2021-12-16 10:23:36.097423"], ["mobileno", 945822554], ["country", "india"], ["age", "thirty-one"]]
  TRANSACTION (19.0ms)  COMMIT
 => true 

3.0.2 :020 > u.age = 31
 => 31 

3.0.2 :021 > u.save
  TRANSACTION (0.3ms)  BEGIN
  User Exists? (0.5ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 AND "users"."id" != $2 LIMIT $3  [["mobileno", 945822554], ["id", 13], ["LIMIT", 1]]
  User Update (0.6ms)  UPDATE "users" SET "updated_at" = $1, "age" = $2 WHERE "users"."id" = $3  [["updated_at", "2021-12-16 10:24:10.829760"], ["age", "31"], ["id", 13]]
  TRANSACTION (12.2ms)  COMMIT
 => true 



3.0.2 :030 > u = User.new(first_name:"mathur", last_name: "verma", email: "mathur23@gmail.com", mobileno: 945820054, country: "india", age: "thirty-one")
 => #<User:0x000055ab4d424890 id: nil, first_name: "mathur", last_name: "verma", email: "mathur23@gmail.com", created_at: nil, updated_at: nil, mobileno: 945820054, country: "india", age: "thirty-o... 

3.0.2 :031 > u.valid?
  User Exists? (0.8ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 945820054], ["LIMIT", 1]]
  User Exists? (1.1ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2  [["email", "mathur23@gmail.com"], ["LIMIT", 1]]
 => true 

3.0.2 :032 > u.valid?(:account_setup)
  User Exists? (0.8ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 945820054], ["LIMIT", 1]]
 => false 

3.0.2 :034 > u.errors.full_messages
 => ["Age is not a number"] 


==========strict validation=================

3.0.2 :037 > u = User.new(first_name: nil, last_name: "verma", email: "mathur23@gmail.com", mobileno: 945820054, country: "india", age: "thirty-one")

 => #<User:0x000055ab4d968158 id: nil, first_name: nil, last_name: "verma", email: "mathur23@gmail.com", created_at: nil, updated_at: nil, mobileno: 945820054, country: "india", age: "thirty-one"> 

3.0.2 :038 > u.valid?
/usr/share/rvm/gems/ruby-3.0.2/gems/activemodel-6.1.4.1/lib/active_model/errors.rb:410:in `add': First name can't be blank (ActiveModel::StrictValidationFailed)

==============Conditional validation=========

3.0.2 :070 > u = User.new(first_name: "obama", last_name: nil, email: "mathur28@gmail.com", mobileno: 58000200, country: "india", age: "thirty-one")
 => #<User:0x000055ab4d39c350 id: nil, first_name: "obama", last_name: nil, email: "mathur28@gmail.com", created_at: nil, updated_at: nil, mobileno: 58000200, country: "india", age: "thirty-one"> 

3.0.2 :071 > u.valid?
  User Exists? (0.8ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 58000200], ["LIMIT", 1]]
  User Exists? (0.8ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2  [["email", "mathur28@gmail.com"], ["LIMIT", 1]]
 => false 

3.0.2 :072 > u = User.new(first_name: "salman", last_name: nil, email: "mathur28@gmail.com", mobileno: 58000200, country: "india", age: "thirty-one")
 => #<User:0x000055ab4bafb288 id: nil, first_name: "salman", last_name: nil, email: "mathur28@gmail.com", created_at: nil, updated_at: nil, mobileno: 58000200, country: "india", age: "thirty-one"> 

3.0.2 :073 > u.valid?
  User Exists? (0.8ms)  SELECT 1 AS one FROM "users" WHERE "users"."mobileno" = $1 LIMIT $2  [["mobileno", 58000200], ["LIMIT", 1]]
  User Exists? (0.7ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2  [["email", "mathur28@gmail.com"], ["LIMIT", 1]]
 => true 


3.0.2 :102 > p = Part.create
 => #<Part:0x000055ab4d43d6d8 id: nil, part_number: nil, created_at: nil, updated_at: nil, price: nil> 

3.0.2 :103 > p.errors.where(:part_number).first.type
 => :to_big 

3.0.2 :104 > p.errors.where(:part_number).first.full_message
 => "Part number Not valid" 


3.0.2 :115 > p = Part.create
 => #<Part:0x000055ab4c877cb8 id: nil, part_number: nil, created_at: nil, updated_at: nil, price: nil> 
 
3.0.2 :116 > p.errors.where(:base).first.full_message
 => "Invalid" 
