-----ALTER TABLES-----

1.Rename a table 

        syntax: ALTER TABLE table_name
                RENAME TO new_name;
        example:ALTER TABLE table_name
                RENAME TO all_users;

output:

ALTER TABLE

\d users:
Did not find any relation named "users".


                           Table "public.all_users"
  Column  |     Type      | Collation | Nullable |              Default              
----------+---------------+-----------+----------+-----------------------------------
 id       | integer       |           | not null | nextval('users_id_seq'::regclass)
 username | character(25) |           |          | 
 enabled  | boolean       |           |          | true
Indexes:
    "users_id_key" UNIQUE CONSTRAINT, btree (id)



select* from all_users;
output:

id | full_name | enabled 
----+-----------+---------
(0 rows)




2.Rename a column

          syntax: ALTER TABLE table_name
                  RENAME COLUMN column_name TO new_name;
          example:ALTER TABLE all_users
                   RENAME COLUMN fullname TO username;
output:
ALTER TABLE

select * from all_users;
 id | username | enabled 
----+----------+---------
(0 rows)




4.Changin data type of a column:

           syntax:ALTER TABLE table_name
                  ALTER COLUMN username TYPE varchar(25);

output of \d all_users:

Table "public.all_users"
  Column  |         Type          | Collation | Nullable |              Default              
----------+-----------------------+-----------+----------+-----------------------------------
 id       | integer               |           | not null | nextval('users_id_seq'::regclass)
 username | character varying(25) |           |          | 
 enabled  | boolean               |           |          | true
Indexes:
    "users_id_key" UNIQUE CONSTRAINT, btree (id)




5.Adding a constraints

          syntax:ALTER TABLE table
                 ALTER COLUMN column
                 SET constraints;
          example:ALTER TABLE all_users
                  ALTER COLUMN user_name
                  SET NOT NULL;
        

utput for \d all_users:

                                  Table "public.all_users"
  Column  |         Type          | Collation | Nullable |              Default              
----------+-----------------------+-----------+----------+-----------------------------------
 id       | integer               |           | not null | nextval('users_id_seq'::regclass)
 username | character varying(25) |           | not null | 
 enabled  | boolean               |           |          | true
Indexes:
    "users_id_key" UNIQUE CONSTRAINT, btree (id)





6.Removing a constraints:

          syntax:ALTER TABLE table_name
      DROP CONSTRAINT constraint_name;

          example:ALTER TABLE all_users
      ALTER COLUMN id
      DROP DEFAULT;

output for \d all_users:

                     Table "public.all_users"
  Column  |         Type          | Collation | Nullable | Default 
----------+-----------------------+-----------+----------+---------
 id       | integer               |           | not null | 
 username | character varying(25) |           | not null | 
 enabled  | boolean               |           |          | true
Indexes:
    "users_id_key" UNIQUE CONSTRAINT, btree (id)




7.Adding a column:
  
ALTER TABLE all_users
      ADD COLUMN last_login timestamp
                 NOT NULL
                 DEFAULT NOW();

output for \d all_users:

                         Table "public.all_users"
   Column   |            Type             | Collation | Nullable | Default 
------------+-----------------------------+-----------+----------+---------
 id         | integer                     |           | not null | 
 username   | character varying(25)       |           | not null | 
 enabled    | boolean                     |           |          | true
 last_login | timestamp without time zone |           | not null | now()
Indexes:
    "users_id_key" UNIQUE CONSTRAINT, btree (id)




8.Deleting a column:

           syntax: ALTER TABLE table DROP COLUMN column;

           example:ALTER TABLE all_users DROP COLUMN enabled;

output for \d all_users:

 Table "public.all_users"
   Column   |            Type             | Collation | Nullable | Default 
------------+-----------------------------+-----------+----------+---------
 id         | integer                     |           | not null | 
 username   | character varying(25)       |           | not null | 
 last_login | timestamp without time zone |           | not null | now()
Indexes:
    "users_id_key" UNIQUE CONSTRAINT, btree (id)

           

 

------------------CREATED A BOOKREVIEW DATABSE AND IN THAT DATABASE I AM GOING TO CREATE FIVE TABLES----------------------------


-----------TABLE USERS->User is someone who is using book to read------------
-----------TABLE BOOKS->Details of books available--------------------------
-----------TABLE REVIEWS->User will  be able to leave reviews of books they've read-----------
-----------TABLE CHECKOUTS->users can do is to checkout books----------------------
-----------TABLE ADDRESS->Stores the address information about users------------------------






1.Inserting in Users table



INSERT INTO USERS (first_name,last_name,enabled,last_login) VALUES ('rohit','sharma',false,'2020-10-10');


uotput for select * from users:

id | first_name | last_name | enabled | last_login 
----+------------+-----------+---------+------------
  1 | rohit      | sharma    | f       | 2020-10-10
(1 row)



--many insertion---

INSERT INTO USERS (first_name,last_name,enabled,last_login) VALUES ('virat','kohli',true,'2020-11-10'),
('surya','yadav',true,'2020-11-19'),
('ishan','kishan',false,'2020-11-10'),
('hardik','pandya',false,'2019-11-10'),
('ishant','sharma',true,'2019-08-10'),
('tarique','aziz',false,'2020-07-10'),
('aman','chohan',true,'2020-11-10'),
('nitish','kumar',false,'2018-11-10'),
('darvesh','sharma',true,'2020-01-10');


output for select * from users;

id | first_name | last_name | enabled | last_login 
----+------------+-----------+---------+------------
  1 | rohit      | sharma    | f       | 2020-10-10
  2 | virat      | kohli     | t       | 2020-11-10
  3 | surya      | yadav     | t       | 2020-11-19
  4 | ishan      | kishan    | f       | 2020-11-10
  5 | hardik     | pandya    | f       | 2019-11-10
  6 | ishant     | sharma    | t       | 2019-08-10
  7 | tarique    | aziz      | f       | 2020-07-10
  8 | aman       | chohan    | t       | 2020-11-10
  9 | nitish     | kumar     | f       | 2018-11-10
 10 | darvesh    | sharma    | t       | 2020-01-10
(10 rows)



 
2. Creating address table 

/*
one-to-one: User has one address
*/

CREATE TABLE addresses (
  user_id int,
  street varchar(30) NOT NULL,
  city varchar(30) NOT NULL,
  state varchar(30) NOT NULL,
  PRIMARY KEY (user_id),
  FOREIGN KEY (user_id) /*foreign key which refers id of users table*/
      REFERENCES users (id)
      ON DELETE CASCADE
);


INSERT INTO addresses
(user_id,street,city,state)
VALUES (1, '1 shastri nagar','south delhi','delhi'),(2, '1 nehru nagar','west delhi','delhi'),(3, '2 jawahar nagar','north delhi','delhi'),
(4, 'stefen street','mandi','mumbai'),(5, 'babatpur road','varanasi','uttar pradesh'),(6, 'gb road','ballia','uttar pradesh'),
(7,'23 transport nagar','jaipur','rajasthan'),(8, 'cp choraha','jodhpur','rajasthan'),(9, '2 delhi road','agra','uttar pradesh'),
(10, '1 juhu beach','thane','mumbai');


query : select * from addresses;
output:
user_id |       street       |    city     |     state     
---------+--------------------+-------------+---------------
       1 | 1 shastri nagar    | south delhi | delhi
       2 | 1 nehru nagar      | west delhi  | delhi
       3 | 2 jawahar nagar    | north delhi | delhi
       4 | stefen street      | mandi       | mumbai
       5 | babatpur road      | varanasi    | uttar pradesh
       6 | gb road            | ballia      | uttar pradesh
       7 | 23 transport nagar | jaipur      | rajasthan
       8 | cp choraha         | jodhpur     | rajasthan
       9 | 2 delhi road       | agra        | uttar pradesh
      10 | 1 juhu beach       | thane       | mumbai
(10 rows)



Creating book and rview tables-------------

CREATE TABLE books (
  id serial,
  title varchar(100) NOT NULL,
  author varchar(100) NOT NULL,
  published_date date NOT NULL,
  isbn char(12),
  PRIMARY KEY (id),
  UNIQUE (isbn)
);

CREATE TABLE reviews (
  id serial,
  book_id integer NOT NULL,
  reviewer_name varchar(255),
  content varchar(255),
  rating integer,
  published_date date NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (book_id)
      REFERENCES books(id)
      ON DELETE CASCADE
);




---------Inserting in books--------

INSERT INTO books
  (id, title, author, published_date, isbn)
  VALUES
      (1, 'Data Structure', 'Mary Parker',
          '2012-02-22',
          '981483029127'),
      (2, 'Algorithm', 'John Mayer',
          '1972-07-03',
          '857300923713'),
      (3, 'Computer network', 'Cary Flint',
          '2015-10-18',
          '523120967812'),
      (4, 'database', 'hary Parker',
          '2012-02-22',
          '981433029127'),
      (5, 'architecture', 'John flint',
          '1972-07-03',
          '857311923713'),
      (6, 'compiler design', 'Cary Flint',
          '2015-10-18',
          '523102096781'),
      (7, 'aptitude', 'rd sharma',
          '2012-02-22',
          '980483029127'),
      (8, 'machine learning', 'Andrew NG',
          '1972-07-03',
          '857700923713'),
      (9, 'Deep learning', 'Cary Flint',
          '2015-10-18',
          '523220967812'),
      (10,'rocket science','elon musk','2011-03-25','123456789123');
INSERT 0 10

SELECT * FROM BOOKS;

OUTPUT:
id |      title       |   author    | published_date |     isbn     
----+------------------+-------------+----------------+--------------
  1 | Data Structure   | Mary Parker | 2012-02-22     | 981483029127
  2 | Algorithm        | John Mayer  | 1972-07-03     | 857300923713
  3 | Computer network | Cary Flint  | 2015-10-18     | 523120967812
  4 | database         | hary Parker | 2012-02-22     | 981433029127
  5 | architecture     | John flint  | 1972-07-03     | 857311923713
  6 | compiler design  | Cary Flint  | 2015-10-18     | 523102096781
  7 | aptitude         | rd sharma   | 2012-02-22     | 980483029127
  8 | machine learning | Andrew NG   | 1972-07-03     | 857700923713
  9 | Deep learning    | Cary Flint  | 2015-10-18     | 523220967812
 10 | rocket science   | elon musk   | 2011-03-25     | 123456789123
(10 rows)



------------insertin in reviews table-------

INSERT INTO reviews
bookreview-#   (id, book_id, reviewer_name, content, rating,
bookreview(#        published_date)
bookreview-#   VALUES
bookreview-#       (1, 1, 'rohit', 'great book', 8,
bookreview(#           '2017-12-10'),
bookreview-#       (2, 2, 'virat', 'average', 5,
bookreview(#           '2017-10-13'),
bookreview-#       (3, 2, 'aman', 'not good', 4,
bookreview(#           '2017-10-22'),
bookreview-#       (4, 6, 'tarique', 'not good', 5,
bookreview(#           '2017-10-22'),
bookreview-#       (5, 10, 'nitish', 'excellent', 9,
bookreview(#           '2017-10-22'),
bookreview-#       (6, 10, 'darvesh', 'great book', 8,
bookreview(#           '2017-12-12'),
bookreview-#       (7, 2, 'virat', 'very good', 8,
bookreview(#           '2017-10-13'),
bookreview-#       (8, 2, 'surya', 'not good', 4,
bookreview(#           '2017-11-22'),
bookreview-#       (9, 6, 'tarique', 'not good', 5,
bookreview(#           '2017-10-22'),
bookreview-#       (10, 8, 'ishan', 'excellent', 9,
bookreview(#           '2016-10-22');
INSERT 0 10

output:

bookreview=# select * from review;
bookreview=# select * from reviews;
 id | book_id | reviewer_name |  content   | rating | published_date 
----+---------+---------------+------------+--------+----------------
  1 |       1 | rohit         | great book |      8 | 2017-12-10
  2 |       2 | virat         | average    |      5 | 2017-10-13
  3 |       2 | aman          | not good   |      4 | 2017-10-22
  4 |       6 | tarique       | not good   |      5 | 2017-10-22
  5 |      10 | nitish        | excellent  |      9 | 2017-10-22
  6 |      10 | darvesh       | great book |      8 | 2017-12-12
  7 |       2 | virat         | very good  |      8 | 2017-10-13
  8 |       2 | surya         | not good   |      4 | 2017-11-22
  9 |       6 | tarique       | not good   |      5 | 2017-10-22
 10 |       8 | ishan         | excellent  |      9 | 2016-10-22
(10 rows)




-----creating checkouts table---------

CREATE TABLE checkouts (
  id serial,
  user_id int NOT NULL,
  book_id int NOT NULL,
  checkout_date date,
  return_date date,
  PRIMARY KEY (id),
  FOREIGN KEY (user_id) REFERENCES users(id)
                        ON DELETE CASCADE,
  FOREIGN KEY (book_id) REFERENCES books(id)
                        ON DELETE CASCADE
);


---------inserting in checkouts table-------------


bookreview=# INSERT INTO checkouts
bookreview-#   (id, user_id, book_id, checkout_date, return_date)
bookreview-#   VALUES
bookreview-#     (1, 1, 1, '2017-10-15',
bookreview(#               '2017-12-15'),
bookreview-#     (2, 1, 2, '2017-10-05',
bookreview(#               '2017-11-13'),
bookreview-#     (3, 2, 2, '2017-05-18',
bookreview(#               '2018-10-22'),
bookreview-#     (4, 5, 3, '2017-10-15',
bookreview(#               '2018-01-21'),
bookreview-#     (5, 1, 6, '2019-10-15',
bookreview(#               '2020-05-20'),
bookreview-#     (6, 2, 5, '2019-10-05',
bookreview(#               '2019-10-13'),
bookreview-#     (7, 2, 2, '2019-08-15',
bookreview(#               '2017-10-22'),
bookreview-#     (8, 5, 3, '2018-10-15',
bookreview(#               '2018-12-16'),
bookreview-#     (9, 7, 4,'2020-04-25',
bookreview(#              '2020-06-30'),
bookreview-#     (10, 6,5,'2019-05-15','2019-07-30');
INSERT 0 10

output:

bookreview=# select * from checkouts;
 id | user_id | book_id | checkout_date | return_date 
----+---------+---------+---------------+-------------
  1 |       1 |       1 | 2017-10-15    | 2017-12-15
  2 |       1 |       2 | 2017-10-05    | 2017-11-13
  3 |       2 |       2 | 2017-05-18    | 2018-10-22
  4 |       5 |       3 | 2017-10-15    | 2018-01-21
  5 |       1 |       6 | 2019-10-15    | 2020-05-20
  6 |       2 |       5 | 2019-10-05    | 2019-10-13
  7 |       2 |       2 | 2019-08-15    | 2017-10-22
  8 |       5 |       3 | 2018-10-15    | 2018-12-16
  9 |       7 |       4 | 2020-04-25    | 2020-06-30
 10 |       6 |       5 | 2019-05-15    | 2019-07-30
(10 rows)



------------------JOINS--------------

Joins clause is used to combine records from two or more tables in a database. A JOIN is a means for combining fields from two tables by using values common to each.


1. INNER JOIN

             syntax: 
