 ..........................................................................PostgreSQL commands and Syntax....................................................................................
1. PostgreSQL installation

                     step1. sudo apt update
                     step2. sudo apt install postgresql postgresql-contrib


2.Access the PSQL command prompt

                cmd: sudo -u postgres psql

                output:
[sudo] password for aziz: 
psql (12.8 (Ubuntu 12.8-0ubuntu0.20.04.1))
Type "help" for help.



3.Come out from PSQL command prompt

               cmd: \q


4.List out the available databases 

               cmd: \l


             output:

 List of databases
   Name    |  Owner   | Encoding | Collate | Ctype |   Access privileges   
-----------+----------+----------+---------+-------+-----------------------
 postgres  | postgres | UTF8     | en_IN   | en_IN | 
 template0 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
(3 rows)



5.List out all the users 

               cmd: \du

           output:

          List of roles
 Role name |                         Attributes                         | Member of 
-----------+------------------------------------------------------------+-----------
 Aziz      | Superuser, Create role, Create DB                          | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}




6. Show help about psql command line arguments

                cmd: \?

7. Create databse 

              syntax: CREATE DATABASE name;

              example:  CREATE DATABASE test;

          output:
 CREATE DATABASE


8. Connect to the databases

          cmd: \c database_name

          example:  \c test
output:
You are now connected to database "test" as user "postgres".



10. DROP database completely (Everything will be deleted in database)

         syntax: DROP DATABASE databse_name;
         example:  DROP DATABASE test;
output:
 DROP DATABASE


11. Create a table in PSQL

          syntax: CREATE TABLE table_name(
                  column1  datatype  constraints,
                  column2  datatype  constraonts,
                  .
                  .
                  columnN datatype constraints,
                  PRIMARY KEY (One or more columns)
                  );


      example:CREATE TABLE TEACHER (
 id INT NOT NULL,
 name VARCHAR(50) NOT NULL,
 subject VARCHAR(50) NOT NULL,
 date_of_birth DATE NOT NULL,
 salary INT NOT NULL,
 PRIMARY KEY (id)
 );

output:
CREATE TABLE



12. Check all the table inside database

             cmd: \d  or \dt

output:
  List of relations
 Schema |  Name   | Type  |  Owner   
--------+---------+-------+----------
 public | teacher | table | postgres
(1 row)



13. To see the table details

           syntax: \d table_name
           example: \d teacher

output:
 Table "public.teacher"
    Column     |         Type          | Collation | Nullable | Default 
---------------+-----------------------+-----------+----------+---------
 id            | integer               |           | not null | 
 name          | character varying(50) |           | not null | 
 subject       | character varying(50) |           | not null | 
 date_of_birth | date                  |           | not null | 
 salary        | integer               |           | not null | 
Indexes:
    "teacher_pkey" PRIMARY KEY, btree (id)
 




14. Drop a table from database

             syntax: drop table table_name;
             example: drop table department;

output:
DROP TABLE


15. Creating a Schema 

            syntax: CREATE SCHEMA name;
            example: CREATE SCHEMA TableSchemai;

output:
CREATE SCHEMA



16. Create a table in Schema 

             syntax:create table myschema.company(
   ID   INT              NOT NULL,
   NAME VARCHAR (20)     NOT NULL,
   AGE  INT              NOT NULL,
   ADDRESS  CHAR (25),
   SALARY   DECIMAL (18, 2),
   PRIMARY KEY (ID)
);


17. Check the table created in schema 

               syntax: select * from myschema.company;

output:
 id | name | age | address | salary 
----+------+-----+---------+--------
(0 rows)




18. Insert into a table

            syntax: INSERT INTO TABLE_NAME (column1, column2, column3,...columnN)
                    VALUES (value1, value2, value3,...valueN);  

            example:INSERT INTO TEACHER (id,name,subject,date_of_birth,salary) VALUES(1,'RAHUL','MATHS','2007-12-13',50000),
                    (2,'MUKESH','ENGLISH','2008-12-13',55000),
                    (3,'RAVI','HINDI','2007-10-13',60000),
                    (4,'PRAKASH','SCIENCE','2009-12-23',40000);

output:
INSERT 0 4



19. To display the tables(All columns) 

            syntax: SELECT * FROM table_name;
            example:SELECT * FROM teacher;
output:
id |  name   | subject | date_of_birth | salary 
----+---------+---------+---------------+--------
  1 | RAHUL   | MATHS   | 2007-12-13    |  50000
  2 | MUKESH  | ENGLISH | 2008-12-13    |  55000
  3 | RAVI    | HINDI   | 2007-10-13    |  60000
  4 | PRAKASH | SCIENCE | 2009-12-23    |  40000
(4 rows)



20. To select particular columns 

            syntax: SELECT COLUMN1,COLUMN2,.....,COLUMNn FROM table_name;
            example: SELECT id,salary FROM teacher;

output:

id | salary 
----+--------
  1 |  50000
  2 |  55000
  3 |  60000
  4 |  40000
(4 rows)





21. select * from company;
output:
id |  name  | age |                      address                       | salary | join_date  
----+--------+-----+----------------------------------------------------+--------+------------
  1 | Paul   |  32 | California                                         |  20000 | 2001-07-13
  2 | Allen  |  25 | Texas                                              |        | 2007-12-13
  3 | Teddy  |  23 | Norway                                             |  20000 | 
  4 | Mark   |  25 | Rich-Mond                                          |  65000 | 2007-12-13
  5 | David  |  27 | Texas                                              |  85000 | 2007-12-13
  9 | Aman   |  24 | Norway                                             |  70000 | 2008-12-15
  6 | Nitish |  30 | Rich-Mond                                          |  45000 | 2010-12-13
  7 | Messi  |  25 | Texas                                              |  32000 | 2011-12-13
  8 | xavi   |  32 | Rich-Mond                                          |  40000 | 2012-12-13
(9 rows)









22.  WHERE Clause: used to specify a condition while fetching the data from single table or joining with multiple tables.

                      syntax:SELECT column1, column2, columnN
                             FROM table_name
                             WHERE [search_condition]
                      example: select * from company where age>25;
output:
id |  name  | age |                      address                       | salary | join_date  
----+--------+-----+----------------------------------------------------+--------+------------
  1 | Paul   |  32 | California                                         |  20000 | 2001-07-13
  5 | David  |  27 | Texas                                              |  85000 | 2007-12-13
  6 | Nitish |  30 | Rich-Mond                                          |  45000 | 2010-12-13
  8 | xavi   |  32 | Rich-Mond                                          |  40000 | 2012-12-13
(4 rows)

    


23.   SELECT * FROM COMPANY WHERE AGE >= 25 OR SALARY >= 65000;

output:
id |  name  | age |                      address                       | salary | join_date  
----+--------+-----+----------------------------------------------------+--------+------------
  1 | Paul   |  32 | California                                         |  20000 | 2001-07-13
  2 | Allen  |  25 | Texas                                              |        | 2007-12-13
  4 | Mark   |  25 | Rich-Mond                                          |  65000 | 2007-12-13
  5 | David  |  27 | Texas                                              |  85000 | 2007-12-13
  9 | Aman   |  24 | Norway                                             |  70000 | 2008-12-15
  6 | Nitish |  30 | Rich-Mond                                          |  45000 | 2010-12-13
  7 | Messi  |  25 | Texas                                              |  32000 | 2011-12-13
  8 | xavi   |  32 | Rich-Mond                                          |  40000 | 2012-12-13
(8 rows)




24.Update query with where clause;
                 
                  syntax:UPDATE table_name
                  SET column1 = value1, column2 = value2...., columnN = valueN
                  WHERE [condition];

                  example:UPDATE COMPANY SET join_date = '2002-07-09' WHERE ID = 3;
OUTPUT:
id |  name  | age |                      address                       | salary | join_date  
----+--------+-----+----------------------------------------------------+--------+------------
  1 | Paul   |  32 | California                                         |  20000 | 2001-07-13
  4 | Mark   |  25 | Rich-Mond                                          |  65000 | 2007-12-13
  5 | David  |  27 | Texas                                              |  85000 | 2007-12-13
  9 | Aman   |  24 | Norway                                             |  70000 | 2008-12-15
  6 | Nitish |  30 | Rich-Mond                                          |  45000 | 2010-12-13
  7 | Messi  |  25 | Texas                                              |  32000 | 2011-12-13
  8 | xavi   |  32 | Rich-Mond                                          |  40000 | 2012-12-13
  2 | Allen  |  25 | Texas                                              |  15000 | 2002-07-08
  3 | Teddy  |  23 | Norway                                             |  20000 | 2002-07-09




25. Delete query 

          syntax: DELETE FROM table_name  WHERE condition;
          example:DELETE FROM company WHERE id=2;
output after query select * from company:

id |  name  | age |                      address                       | salary | join_date  
----+--------+-----+----------------------------------------------------+--------+------------
  1 | Paul   |  32 | California                                         |  20000 | 2001-07-13
  4 | Mark   |  25 | Rich-Mond                                          |  65000 | 2007-12-13
  5 | David  |  27 | Texas                                              |  85000 | 2007-12-13
  9 | Aman   |  24 | Norway                                             |  70000 | 2008-12-15
  6 | Nitish |  30 | Rich-Mond                                          |  45000 | 2010-12-13
  7 | Messi  |  25 | Texas                                              |  32000 | 2011-12-13
  8 | xavi   |  32 | Rich-Mond                                          |  40000 | 2012-12-13
  3 | Teddy  |  23 | Norway                                             |  20000 | 2002-07-09



26. LIKE Clause:The PostgreSQL LIKE operator is used to match text values against a pattern using wildcards.
                        
                              syntax: SELECT FROM table_name
                                      WHERE column LIKE 'aa%'

                              example:SELECT * FROM COMPANY WHERE AGE::text LIKE '2%'; /* list the record in which age is starting with 2*/
 output:
id | name  | age |                      address                       | salary | join_date  
----+-------+-----+----------------------------------------------------+--------+------------
  4 | Mark  |  25 | Rich-Mond                                          |  65000 | 2007-12-13
  5 | David |  27 | Texas                                              |  85000 | 2007-12-13
  9 | Aman  |  24 | Norway                                             |  70000 | 2008-12-15
  7 | Messi |  25 | Texas                                              |  32000 | 2011-12-13
  3 | Teddy |  23 | Norway                                             |  20000 | 2002-07-09
(5 rows)




                            syntax: SELECT FROM table_name
                                    WHERE column LIKE '%XXXX%'
                            example:SELECT * FROM COMPANY WHERE ADDRESS  LIKE '%-%'; /* it will display the records in which address contains - */ 
output:

id |  name  | age |                      address                       | salary | join_date  
----+--------+-----+----------------------------------------------------+--------+------------
  4 | Mark   |  25 | Rich-Mond                                          |  65000 | 2007-12-13
  6 | Nitish |  30 | Rich-Mond                                          |  45000 | 2010-12-13
  8 | xavi   |  32 | Rich-Mond                                          |  40000 | 2012-12-13
(3 rows)



27. LIMIT clause: LIMIT clause is used to limit the data amount returned by the SELECT statement.

                        syntax: SELECT column1, column2, columnN
                                FROM table_name
                                LIMIT [no of rows]

                        example: SELECT * FROM COMPANY LIMIT 4;
output:
id | name  | age |                      address                       | salary | join_date  
----+-------+-----+----------------------------------------------------+--------+------------
  1 | Paul  |  32 | California                                         |  20000 | 2001-07-13
  4 | Mark  |  25 | Rich-Mond                                          |  65000 | 2007-12-13
  5 | David |  27 | Texas                                              |  85000 | 2007-12-13
  9 | Aman  |  24 | Norway                                             |  70000 | 2008-12-15


                       syntax: SELECT column1, column2, columnN
                               FROM table_name
                               LIMIT [no of rows] OFFSET [row num]
                       example: SELECT * FROM COMPANY LIMIT 3 OFFSET 2;
output:
id |  name  | age |                      address                       | salary | join_date  
----+--------+-----+----------------------------------------------------+--------+------------
  5 | David  |  27 | Texas                                              |  85000 | 2007-12-13
  9 | Aman   |  24 | Norway                                             |  70000 | 2008-12-15
  6 | Nitish |  30 | Rich-Mond                                          |  45000 | 2010-12-13
(3 rows)




28.ORDER by:ORDER BY clause is used to sort the data in ascending or descending order.
              
                   syntax:SELECT column-list
                          FROM table_name
                          [WHERE condition]
                          [ORDER BY column1, column2, .. columnN] [ASC | DESC];
 
                  exapmle:SELECT * FROM COMPANY ORDER BY NAME, SALARY ASC;

output:

id |  name  | age |                      address                       | salary | join_date  
----+--------+-----+----------------------------------------------------+--------+------------
  9 | Aman   |  24 | Norway                                             |  70000 | 2008-12-15
  5 | David  |  27 | Texas                                              |  85000 | 2007-12-13
  4 | Mark   |  25 | Rich-Mond                                          |  65000 | 2007-12-13
  7 | Messi  |  25 | Texas                                              |  32000 | 2011-12-13
  6 | Nitish |  30 | Rich-Mond                                          |  45000 | 2010-12-13
  1 | Paul   |  32 | California                                         |  20000 | 2001-07-13
  3 | Teddy  |  23 | Norway                                             |  20000 | 2002-07-09
  8 | xavi   |  32 | Rich-Mond                                          |  40000 | 2012-12-13
(8 rows)




29.GROUP BY: GROUP BY clause is used in collaboration with the SELECT statement to group together those rows in a table that have identical data.

                                        syntax:SELECT column-list
                                               FROM table_name
                                               WHERE [ conditions ]
                                               GROUP BY column1, column2....columnN
                                               ORDER BY column1, column2....columnN

                                        example: SELECT address, COUNT(*)FROM COMPANY GROUP BY address;
output:

                      address                       | count 
----------------------------------------------------+-------
 Rich-Mond                                          |     3
 California                                         |     1
 Norway                                             |     2
 Texas                                              |     2
(4 rows)


30. WITH clause:the WITH query provides a way to write auxiliary statements for use in a larger query.

                         syntax: WITH
                                 name_for_summary_data AS (
                                        SELECT Statement)
                                        SELECT columns
                                        FROM name_for_summary_data
                                        WHERE conditions <=> (
                                        SELECT column
                                        FROM name_for_summary_data)
               
                         example:WITH RECURSIVE t(n) AS (
                                 VALUES (0)
                                 UNION ALL
                                 SELECT SALARY FROM COMPANY WHERE SALARY < 50000
                                 )
                                 SELECT sum(n) FROM t;

output:
 sum   
--------
 157000
(1 row)


31.HAVING clause: The HAVING clause allows us to pick out particular rows where the function's result meets some condition.

                         syntax:SELECT column1, column2
                                FROM table1, table2
                                WHERE [ conditions ]
                                GROUP BY column1, column2
                                HAVING [ conditions ]
                                ORDER BY column1, column2

                         example:SELECT NAME FROM COMPANY GROUP BY name HAVING count(name) > 1;
output:
 name 
------
 Paul
(1 row)





32. DISTINCT : DISTINCT keyword is used in conjunction with SELECT statement to eliminate all the duplicate records and fetching only unique records.

                      syntax: SELECT DISTINCT column1, column2,.....columnN
                              FROM table_name
                              WHERE [condition]
                      example:SELECT DISTINCT name FROM COMPANY;
output:
 name  
--------
 Teddy
 David
 Paul
 Mark
 Aman
 Nitish
 Messi
 xavi
(8 rows)

